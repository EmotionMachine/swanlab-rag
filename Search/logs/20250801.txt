2025-08-01 15:18:50.057 | DEBUG    | metagpt.provider.base_llm:aask:149 - [{'role': 'system', 'content': 'You are a helpful assistant.'}, {'role': 'user', 'content': '\n            分析以下 Markdown 内容\n            格式如下所示：\n            把内容进行分块整理。\n            主标题：(文档标题)\n            二级标题（文档二级标题）：内容\n            ################\n            主标题：(文档标题)\n            二级标题（文档二级标题）：内容\n            ################\n            ......\n            ################\n            参考内容：# API文档\n\nAPI文档分为以下几个部分：\n\n- `CLI`：命令行部分\n- `Python`：Python SDK部分\n- `其他`：环境变量\n\n## CLI\n- [swanlab watch](/api/cli-swanlab-watch.md): 启动离线实验看板\n- [swanlab login](/api/cli-swanlab-login.md): 登录SwanLab\n- [swanlab logout](/api/cli-swanlab-logout.md): 登出SwanLab\n- [swanlab convert](/api/cli-swanlab-convert.md): 将其他产品的日志转换为SwanLab项目\n- [swanlab sync](/api/cli-swanlab-sync.md): 将本地日志同步到SwanLab云端/私有化部署端\n\n## Python SDK\n- [init](/api/py-init.md)\n- [login](/api/py-login.md)\n- [Image](/api/py-Image.md)\n- [Audio](/api/py-Audio.md)\n- [Text](/api/py-Text.md)\n- [Video](/api/py-video.md)\n- [ECharts](/api/py-echarts.md)\n- [Object3D](/api/py-object3d.md)\n- [Molecule](/api/py-molecule.md)\n- [pr_curve](/api/py-pr_curve.md)\n- [roc_curve](/api/py-roc_curve.md)\n- [confusion_matrix](/api/py-confusion_matrix.md)\n- [run](/api/py-run.md)\n- [convert](/api/py-converter.md)\n- [sync_wandb](/api/py-sync-wandb.md)\n- [sync_tensorboard](/api/py-sync-tensorboard.md)\n- [sync_mlflow](/api/py-sync-mlflow.md)\n- [register_callback](/api/py-register-callback.md)\n\n## 其他\n- [开放接口](/api/py-openapi.md)\n- [环境变量](/api/environment-variable.md)\n\n    \n            '}]
2025-08-01 15:18:59.147 | WARNING  | metagpt.utils.cost_manager:update_cost:49 - Model Qwen/Qwen2.5-32B-Instruct not found in TOKEN_COSTS.
2025-08-01 15:19:00.445 | DEBUG    | metagpt.provider.base_llm:aask:149 - [{'role': 'system', 'content': 'You are a helpful assistant.'}, {'role': 'user', 'content': '\n            分析以下 Markdown 内容\n            格式如下所示：\n            把内容进行分块整理。\n            主标题：(文档标题)\n            二级标题（文档二级标题）：内容\n            ################\n            主标题：(文档标题)\n            二级标题（文档二级标题）：内容\n            ################\n            ......\n            ################\n            参考内容：# swanlab convert\n\n```bash\nswanlab convert [OPTIONS]\n```\n\n| 选项 | 描述 |\n| --- | --- |\n| `-t`, `--type` | 选择转换类型，可选`tensorboard`、`wandb`、`mlflow`，默认为`tensorboard`。 |\n| `-p`, `--project` | 设置转换创建的SwanLab项目名，默认为None。 |\n| `-w`, `--workspace` | 设置SwanLab项目所在空间，默认为None。 |\n| `-l`, `--logdir` | 设置SwanLab项目的日志文件保存路径，默认为None。 |\n| `--cloud` | 设置SwanLab项目是否将日志上传到云端，默认为True。 |\n| `--tb-logdir` | 需要转换的Tensorboard日志文件路径(tfevent) |\n| `--wb-project` | 需要转换的Wandb项目名 |\n| `--wb-entity` | 需要转换的Wandb项目所在实体 |\n| `--wb-runid` | 需要转换的Wandb Run的id |\n| `--mlflow-uri` | 需要转换的MLFlow项目URI |\n| `--mlflow-exp` | 需要转换的MLFlow实验ID |\n\n## 介绍\n\n将其他日志工具的内容转换为SwanLab项目。  \n支持转换的工具包括：`Tensorboard`、`Weights & Biases`、`MLFlow`。\n\n## 使用案例\n\n### Tensorboard\n\n[集成-Tensorboard](/guide_cloud/integration/integration-tensorboard.md)\n\n### Weights & Biases\n\n[集成-Weights & Biases](/guide_cloud/integration/integration-wandb.md)\n\n### MLFlow\n\n[集成-MLFlow](/guide_cloud/integration/integration-mlflow.md)\n            '}]
2025-08-01 15:19:08.217 | WARNING  | metagpt.utils.cost_manager:update_cost:49 - Model Qwen/Qwen2.5-32B-Instruct not found in TOKEN_COSTS.
2025-08-01 15:19:09.540 | DEBUG    | metagpt.provider.base_llm:aask:149 - [{'role': 'system', 'content': 'You are a helpful assistant.'}, {'role': 'user', 'content': '\n            分析以下 Markdown 内容\n            格式如下所示：\n            把内容进行分块整理。\n            主标题：(文档标题)\n            二级标题（文档二级标题）：内容\n            ################\n            主标题：(文档标题)\n            二级标题（文档二级标题）：内容\n            ################\n            ......\n            ################\n            参考内容：# swanlab login\n\n``` bash\nswanlab login [OPTIONS]\n```\n\n| 选项 | 描述 |\n| --- | --- |\n| `-r`, `--relogin` | 重新登录。|\n| `-h`, `--host` | 指定SwanLab服务所在的主机。比如`http://localhost:8000`。|\n| `-k`, `--api-key` | 指定API Key。如果您不喜欢使用命令行来输入 API 密钥，这将允许自动登录。|\n| `-w`, `--web-host` | 指定SwanLab前端所在的Web主机。|\n\n## 介绍\n\n登录SwanLab账号，以同步实验到云端。\n\n执行下面的命令后，如果第一次登录，会让你填写[API_KEY](https://swanlab.cn/settings)：\n\n```bash\nswanlab login\n```\n\n登录过一次后，凭证会保存到本地，并覆盖之前登录过的凭证，无需再次通过`swanlab.login`或`swanlab login`登录。\n\n> 如果你不希望凭证保存在本地，请在python脚本中使用[swanlab.login()](./py-login.md)进行登录。\n\n如果你的电脑不太适合命令行粘贴API Key（比如一些Windows CMD）的方式登录，可以使用：\n\n```bash\nswanlab login -k <api-key>\n```\n\n\n## 重新登录\n\n如果需要登录一个别的账号，则用下面的命令：\n\n```bash\nswanlab login --relogin\n```\n\n这会让你输入一个新的API Key以重新登录。\n\n## 退出登录\n\n```bash\nswanlab logout\n```\n\n## 登录到私有化服务\n\n```bash\nswanlab login --host <host>\n```\n\n\n            '}]
2025-08-01 15:19:14.386 | WARNING  | metagpt.utils.cost_manager:update_cost:49 - Model Qwen/Qwen2.5-32B-Instruct not found in TOKEN_COSTS.
2025-08-01 15:19:15.842 | DEBUG    | metagpt.provider.base_llm:aask:149 - [{'role': 'system', 'content': 'You are a helpful assistant.'}, {'role': 'user', 'content': '\n            分析以下 Markdown 内容\n            格式如下所示：\n            把内容进行分块整理。\n            主标题：(文档标题)\n            二级标题（文档二级标题）：内容\n            ################\n            主标题：(文档标题)\n            二级标题（文档二级标题）：内容\n            ################\n            ......\n            ################\n            参考内容：# swanlab logout\n\n```bash\nswanlab logout\n```\n\n在编程环境上退出账号。\n            '}]
2025-08-01 15:19:17.224 | WARNING  | metagpt.utils.cost_manager:update_cost:49 - Model Qwen/Qwen2.5-32B-Instruct not found in TOKEN_COSTS.
2025-08-01 15:19:18.601 | DEBUG    | metagpt.provider.base_llm:aask:149 - [{'role': 'system', 'content': 'You are a helpful assistant.'}, {'role': 'user', 'content': '\n            分析以下 Markdown 内容\n            格式如下所示：\n            把内容进行分块整理。\n            主标题：(文档标题)\n            二级标题（文档二级标题）：内容\n            ################\n            主标题：(文档标题)\n            二级标题（文档二级标题）：内容\n            ################\n            ......\n            ################\n            参考内容：# 其他CLI命令\n\n- `swanlab -v`：查看SwanLab库版本\n- `swanlab --help`：API帮助\n            '}]
2025-08-01 15:19:20.275 | WARNING  | metagpt.utils.cost_manager:update_cost:49 - Model Qwen/Qwen2.5-32B-Instruct not found in TOKEN_COSTS.
2025-08-01 15:19:21.566 | DEBUG    | metagpt.provider.base_llm:aask:149 - [{'role': 'system', 'content': 'You are a helpful assistant.'}, {'role': 'user', 'content': '\n            分析以下 Markdown 内容\n            格式如下所示：\n            把内容进行分块整理。\n            主标题：(文档标题)\n            二级标题（文档二级标题）：内容\n            ################\n            主标题：(文档标题)\n            二级标题（文档二级标题）：内容\n            ################\n            ......\n            ################\n            参考内容：# swanlab sync\n\n```bash\nswanlab sync [options] [logdir]\n```\n\n| 选项 | 描述 |\n| --- | --- |\n| `-k`, `--api-key` | 用于身份验证的API密钥。如果未指定，将使用环境中的默认API密钥。如果指定，将使用此API密钥登录但不会保存密钥。|\n| `-h`, `--host` | 同步日志的主机地址。如果未指定，将使用默认主机(`https://swanlab.cn`)。|\n| `-w`, `--workspace` | 同步日志的工作空间。如果未指定，将使用默认工作空间。|\n| `-p`, `--project` | 同步日志的项目。如果未指定，将使用默认项目。|\n| `-i`, `--id` | 同步日志的实验ID。仅当路径为单个目录时可用。|\n\n\n## 介绍\n\n将本地日志，同步上传到SwanLab云端/私有化部署端。\n\n## 版本对照\n\n> 版本对照仅适用于`swanlab sync`命令\n\n| swanlab库版本 | 特性 | 支持的日志文件 |\n| --- | --- | --- |\n| >=0.6.8 | 支持同步训练异常终端的日志文件；支持`id`参数 | 由`>=0.6.8`版本的swanlab库产生 |\n| <0.6.8 | - | 由`<0.6.8`版本的swanlab库产生 |\n\n## 命令行示例\n\n找到你需要上传到云端的日志文件目录（默认是`swanlog`下的以`run-`开头的目录），然后执行命令：\n\n```bash\nswanlab sync ./swanlog/run-xxx\n```\n\n::: info\n默认同步到的项目的是日志文件中记录的`project`，即跑该实验时设置的`project`。  \n如果想要同步到其他项目，可以使用`-p`选项指定项目。\n:::\n\n看到下面的打印信息，则表示同步成功：\n\n![swanlab sync](./cli-swanlab-sync/console.png)\n\n完成sync操作后，项目上会多出一个新的实验。\n\n\n## Python代码示例\n\n```python\nimport swanlab\n\nswanlab.login(api_key="你的API Key")\n\nswanlab.sync(\n    dir_path="./swanlog/run-xxx",\n    workspace="swanlab",\n    project_name="sync_test",\n)\n```\n\n## 批量上传\n\n```bash\nswanlab sync ./swanlog/run-*\n```\n\n## resume式同步\n\n如果你不希望创建1个新实验，而是在原本的实验上同步（会自行比对数据，增加差异的部分），可以使用`--id`参数：\n\n```bash\nswanlab sync ./swanlog/run-xxx --id <实验ID>\n```\n\n实验ID获取方式见：[恢复实验/断点续训](/guide_cloud/experiment_track/resume-experiment.md)\n            '}]
2025-08-01 15:19:33.026 | WARNING  | metagpt.utils.cost_manager:update_cost:49 - Model Qwen/Qwen2.5-32B-Instruct not found in TOKEN_COSTS.
2025-08-01 15:19:34.448 | DEBUG    | metagpt.provider.base_llm:aask:149 - [{'role': 'system', 'content': 'You are a helpful assistant.'}, {'role': 'user', 'content': '\n            分析以下 Markdown 内容\n            格式如下所示：\n            把内容进行分块整理。\n            主标题：(文档标题)\n            二级标题（文档二级标题）：内容\n            ################\n            主标题：(文档标题)\n            二级标题（文档二级标题）：内容\n            ################\n            ......\n            ################\n            参考内容：# swanlab watch\n\n``` bash\nswanlab watch [OPTIONS]\n```\n\n| 选项 | 描述 | 例子 |\n| --- | --- | --- |\n| `-p`, `--port` | 设置实验看板Web服务运行的端口，默认为**5092**。 | `swanlab watch -p 8080`：将实验看板Web服务设置为8080端口 |\n| `-h`, `--host` | 设置实验看板Web服务运行的IP地址，默认为**127.0.0.1**。 | `swanlab watch -h 0.0.0.0`：将实验看板Web服务的IP地址设置为0.0.0.0 |\n| `-l`, `--logdir` | 设置实验看板Web服务读取的日志文件路径，默认为`swanlog`。 | `swanlab watch --logdir ./logs`：将当前目录下的logs文件夹设置为日志文件读取路径 |\n| `--help` | 查看终端帮助信息。 | `swanlab watch --help` |\n\n## 介绍\n\n本地启动SwanLab[离线看板](/zh/guide_cloud/self_host/offline-board.md)。  \n在创建SwanLab实验时（并设置mode="local"），会在本地目录下创建一个日志文件夹（默认名称为`swanlog`），使用`swanlab watch`可以本地离线打开实验看板，查看指标图表和配置。\n\n## 使用案例\n\n### 打开SwanLab离线看板\n\n首先，我们找到日志文件夹（默认名称为`swanlog`），然后在命令行执行下面的命令：\n\n```bash\nswanlab watch -l [logfile_path]\n```\n\n其中`logfile_path`是日志文件夹的路径，可以是绝对路径或相对路径。如果你的日志文件夹名称是默认的`swanlog`，那么也可以直接用`swanlab watch`启动而无需`-l`选项。\n\n执行命令后，会看到下面的输出：\n```bash{6}\nswanlab watch -l [logfile_path]\n\n*swanlab: Try to explore the swanlab experiment logs in: [logfile_path]\n*swanlab: SwanLab Experiment Dashboard ready in 465ms\n\n        ➜  Local:   http://127.0.0.1:5092\n```\n\n访问提供的URL，即可访问SwanLab离线看板。\n\n### 设置IP和端口号\n\n我们可以通过`-h`参数设置IP，`-p`参数设置端口号。  \n比如我们希望能够在本地访问云服务器上的离线看板，那么需要在云服务器上开启实验看板时，设置IP为0.0.0.0：\n\n```bash\nswanlab watch -h 0.0.0.0\n```\n\n如果需要设置端口的话：\n```bash\nswanlab watch -h 0.0.0.0 -p 8080\n```\n            '}]
2025-08-01 15:19:46.830 | WARNING  | metagpt.utils.cost_manager:update_cost:49 - Model Qwen/Qwen2.5-32B-Instruct not found in TOKEN_COSTS.
2025-08-01 15:19:48.274 | DEBUG    | metagpt.provider.base_llm:aask:149 - [{'role': 'system', 'content': 'You are a helpful assistant.'}, {'role': 'user', 'content': '\n            分析以下 Markdown 内容\n            格式如下所示：\n            把内容进行分块整理。\n            主标题：(文档标题)\n            二级标题（文档二级标题）：内容\n            ################\n            主标题：(文档标题)\n            二级标题（文档二级标题）：内容\n            ################\n            ......\n            ################\n            参考内容：# 环境变量\n\n[⚙️完整环境变量1 -> Github](https://github.com/SwanHubX/SwanLab/blob/main/swanlab/env.py)、[⚙️完整环境变量2 -> Github](https://github.com/SwanHubX/SwanLab-Toolkit/blob/main/swankit/env.py)\n\n## 全局配置\n\n| 环境变量 | 描述 | 默认值 |\n| --- | --- | --- |\n| `SWANLAB_SAVE_DIR` | SwanLab 全局文件夹保存的路径 | 用户主目录下的 `.swanlab` 文件夹 |\n| `SWANLAB_LOG_DIR` | SwanLab 解析日志文件保存的路径 | 当前运行目录的 `swanlog` 文件夹 |\n| `SWANLAB_MODE` | SwanLab 的解析模式，涉及操作员注册的回调。目前有三种模式：`local`、`cloud`、`disabled`。**注意：大小写敏感** | `cloud` |\n\n## 服务配置\n\n| 环境变量 | 描述 | \n| --- | --- |\n| `SWANLAB_BOARD_PORT` | CLI 离线看板 `swanboard` 服务的端口 |\n| `SWANLAB_BOARD_HOST` | CLI 离线看板 `swanboard` 服务的地址 |\n| `SWANLAB_WEB_HOST` | SwanLab 云端环境的 Web 地址 |\n| `SWANLAB_API_HOST` | SwanLab 云端环境的 API 地址 |\n\n## 实验配置\n\n| 环境变量 | 描述 |\n| --- | --- |\n| `SWANLAB_PROJ_NAME` | 项目名称，效果等价于 `swanlab.init(project="...")` |\n| `SWANLAB_WORKSPACE` | 工作空间名称，效果等价于 `swanlab.init(workspace="...")` |\n| `SWANLAB_EXP_NAME` | 实验名称，效果等价于 `swanlab.init(experiment_name="...")` |\n| `SWANLAB_RUN_ID` | 实验运行ID，效果等价于 `swanlab.init(id="...")` |\n| `SWANLAB_RESUME` | 是否断点续训，效果等价于 `swanlab.init(resume=...)`，可选值为 `must`、`allow`、`never` |\n\n## 登录认证\n\n| 环境变量 | 描述 |\n| --- | --- | \n| `SWANLAB_API_KEY` | 云端 API Key。登录时会首先查找此环境变量，如果不存在，判断用户是否已登录，未登录则进入登录流程。<br>- 如果 `login` 接口传入字符串，此环境变量无效<br>- 如果用户已登录，此环境变量的优先级高于本地存储的登录信息 |\n\n## 其他\n\n| 环境变量 | 描述 |\n| --- | --- |\n| `SWANLAB_WEBHOOK` | Webhook 地址。<br> SwanLab 初始化完毕时，如果此环境变量存在，会调用此地址发送消息 |\n            '}]
2025-08-01 15:20:07.602 | WARNING  | metagpt.utils.cost_manager:update_cost:49 - Model Qwen/Qwen2.5-32B-Instruct not found in TOKEN_COSTS.
2025-08-01 15:20:08.999 | DEBUG    | metagpt.provider.base_llm:aask:149 - [{'role': 'system', 'content': 'You are a helpful assistant.'}, {'role': 'user', 'content': '\n            分析以下 Markdown 内容\n            格式如下所示：\n            把内容进行分块整理。\n            主标题：(文档标题)\n            二级标题（文档二级标题）：内容\n            ################\n            主标题：(文档标题)\n            二级标题（文档二级标题）：内容\n            ################\n            ......\n            ################\n            参考内容：# swanlab.Audio\n\n[Github源代码](https://github.com/SwanHubX/SwanLab/blob/main/swanlab/data/modules/audio.py)\n\n```python\nAudio(\n    data_or_path: Union[str, np.ndarray],\n    sample_rate: int = 44100,\n    caption: str = None,\n) -> None\n```\n\n| 参数          | 描述                                                                                                     |\n|-------------|--------------------------------------------------------------------------------------------------------|\n| data_or_path | (Union[str, np.ndarray]) 接收音频文件路径、numpy数组。Audio类将判断接收的数据类型做相应的转换。 |\n| sample_rate | (int) 音频的采样率，默认为44100。                                             |\n| caption     | (str) 音频的标签。用于在实验看板中展示音频时进行标记。                                                      |\n\n## 介绍\n\n对各种类型的音频数据做转换，以被`swanlab.log()`记录。\n\n![](/assets/media-audio-1.jpg)\n\n### 从numpy array创建\n\n记录单个音频：\n\n```python\nimport numpy as np\nimport swanlab\n\nrun = swanlab.init()\n\n# 创建一个numpy array类型的音频\nwhite_noise = np.random.randn(2, 100000)\n# 传入swanlab.Audio，设置采样率\naudio = swanlab.Audio(white_noise, caption="white_noise")\n\nrun.log({"examples": audio})\n```\n\n记录多个音频：\n\n```python\nimport numpy as np\nimport swanlab\n\nrun = swanlab.init()\n\n# 创建一个列表\nexamples = []\nfor i in range(3):\n    white_noise = np.random.randn(100000)\n    audio = swanlab.Audio(white_noise, caption="audio_{i}")\n    # 列表中添加swanlab.Audio类型对象\n    examples.append(audio)\n\nrun.log({"examples": examples})\n```\n\n### 从文件路径创建\n\n```python\nimport swanlab\n\nrun = swanlab.init()\naudio = swanlab.Audio("path/to/file")\n\nrun.log({"examples": audio})\n```\n            '}]
2025-08-01 15:20:16.942 | WARNING  | metagpt.utils.cost_manager:update_cost:49 - Model Qwen/Qwen2.5-32B-Instruct not found in TOKEN_COSTS.
2025-08-01 15:20:18.387 | DEBUG    | metagpt.provider.base_llm:aask:149 - [{'role': 'system', 'content': 'You are a helpful assistant.'}, {'role': 'user', 'content': '\n            分析以下 Markdown 内容\n            格式如下所示：\n            把内容进行分块整理。\n            主标题：(文档标题)\n            二级标题（文档二级标题）：内容\n            ################\n            主标题：(文档标题)\n            二级标题（文档二级标题）：内容\n            ################\n            ......\n            ################\n            参考内容：# swanlab.Image\n\n[Github源代码](https://github.com/SwanHubX/SwanLab/blob/main/swanlab/data/modules/image.py)\n\n```python\nImage(\n    data_or_path: Union[str, np.ndarray, PILImage.Image],\n    mode: str = "RGB",\n    caption: str = None,\n    file_type: str = None,\n    size: Union[int, list, tuple] = None,\n) -> None\n```\n\n| 参数        | 描述                                                                                                                                                                   |\n|-----------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| data_or_path | (Union[str, np.ndarray, PILImage.Image]) 接收图像文件路径、numpy数组、或者PIL图像。Image类将判断接收的数据类型做相应的转换。                                      |\n| mode      | (str) 图像的 PIL 模式。最常见的是 "L"、"RGB"、"RGBA"。完整解释请参阅：[Pillow mode](https://pillow.readthedocs.io/en/stable/handbook/concepts.html#modes)                         |\n| caption   | (str) 图像的标签。用于在实验看板中展示图像时进行标记。                                                                                                                 |\n| file_type | (str) 设置图片的格式，可选[\'png\', \'jpg\', \'jpeg\', \'bmp\']，默认为\'png\'                                                                                                   |\n| size      | (Union[int, list, tuple]) 设置图像的尺寸，默认保持原图尺寸。如果size设置为int类型，如512，将根据最长边不超过512的标准做图像缩放, [size更多用法](#对传入图像做resize)|\n\n\n## 介绍\n\n对各种类型的图像数据做转换，以被`swanlab.log()`记录。\n\n![](/assets/media-image-1.jpg)\n\n### 从numpy array创建\n\n记录单张图像：\n\n```python\nimport numpy as np\nimport swanlab\n\nrun = swanlab.init()\n\n# 1. 创建一个numpy array\nrandom_image = np.random.randint(low=0, high=256, size=(100, 100, 3), dtype=np.uint8)\n# 2. 传入swanlab.Image\nimage = swanlab.Image(random_image, caption="random image")\n\nrun.log({"examples": image})\n```\n\n记录多张图像：\n\n```python\nimport numpy as np\nimport swanlab\n\nrun = swanlab.init()\n\n# 创建一个列表\nexamples = []\nfor i in range(3):\n    random_image = np.random.randint(low=0, high=256, size=(100, 100, 3), dtype=np.uint8)\n    image = swanlab.Image(random_image, caption="random image")\n    # 列表中添加swanlab.Image类型对象\n    examples.append(image)\n\n# 记录图列\nrun.log({"examples": examples})\n```\n\n### 从PyTorch Tensor创建\n\n`swanlab.Image`支持传入尺寸为[B, C, H, W]与[C, H, W]的Tensor。\n\n```python\nimport torch\nimport swanlab\n\nrun = swanlab.init()\n···\nfor batch, ground_truth in train_dataloader():\n    # 假设batch是尺寸为[16, 3, 256, 256]的tensor\n    tensors = swanlab.Image(batch)\n    run.log({"examples": tensors})\n```\n\n\n### 从PIL Image创建\n\n```python\nimport numpy as np\nfrom PIL import Image\nimport swanlab\n\nrun = swanlab.init()\n\n# 创建一个列表\nexamples = []\nfor i in range(3):\n    random_image = np.random.randint(low=0, high=256, size=(100, 100, 3), dtype=np.uint8)\n    pil_image = Image.fromarray(random_image)\n    image = swanlab.Image(pil_image, caption="random image")\n    examples.append(image)\n\nrun.log({"examples": examples})\n```\n\n### 从文件路径创建\n\n```python\nimport swanlab\n\nrun = swanlab.init()\nimage = swanlab.Image("path/to/file", caption="random image")\n\nrun.log({"examples": image})\n```\n\n`swanlab.Image`在默认情况下，是以`png`的格式做图像转换与存储。\n\n如果想要用`jpg`格式：\n\n```python{3}\nimage = swanlab.Image("path/to/file",\n                      caption="random image",\n                      file_type="jpg")\n```\n\n### 对传入图像做Resize\n\n在默认情况，`swanlab.Image`不对图像做任何尺寸缩放。  \n\n如果需要放缩图像，我们可以通过设置`size`参数，来调节图像尺寸。\n\n放缩规则为：  \n\n1. 默认: 不对图像做任何缩放\n\n2. `size`为int类型: 如果最长边超过`size`, 则将最长边设为`size`, 另一边等比例缩放; 否则不缩放\n\n3. `size`为list/tuple类型: \n\n    - (int, int): 将图像缩放到宽为size[0], 高为size[1]\n    - (int, None): 将图像缩放到宽为size[0], 高等比例缩放\n    - (None, int): 将缩放缩放到高为size[1], 宽等比例缩放\n\n```python\nprint(im_array.shape)\n# [1024, 512, 3]\n\nim1 = swanlab.Image(im_array, size=512)\n# [512, 256, 3]\n\nim2 = swanlab.Image(im_array, size=(512, 512))\n# [512, 512, 3]\n\nim3 = swanlab.Image(im_array, size=(None, 1024))\n# [2048, 1024, 3]\n\nim4 = swanlab.Image(im_array, size=(256, None))\n# [256, 128, 3]\n```\n\n### 记录Matplotlib图表\n\n```python\nimport swanlab\nimport matplotlib.pyplot as plt\n\n# 定义横纵坐标的数据\nx = [1, 2, 3, 4, 5]\ny = [2, 3, 5, 7, 11]\n\n# plt创建折线图\nplt.plot(x, y)\n\n# 添加标题和标签\nplt.title("Examples")\nplt.xlabel("X-axis")\nplt.ylabel("Y-axis")\n\nswanlab.init()\n\n# 记录plt\nswanlab.log({"example": swanlab.Image(plt)})\n```\n            '}]
2025-08-01 15:20:41.622 | WARNING  | metagpt.utils.cost_manager:update_cost:49 - Model Qwen/Qwen2.5-32B-Instruct not found in TOKEN_COSTS.
2025-08-01 15:20:42.983 | DEBUG    | metagpt.provider.base_llm:aask:149 - [{'role': 'system', 'content': 'You are a helpful assistant.'}, {'role': 'user', 'content': '\n            分析以下 Markdown 内容\n            格式如下所示：\n            把内容进行分块整理。\n            主标题：(文档标题)\n            二级标题（文档二级标题）：内容\n            ################\n            主标题：(文档标题)\n            二级标题（文档二级标题）：内容\n            ################\n            ......\n            ################\n            参考内容：# swanlab.Text\n\n[Github源代码](https://github.com/SwanHubX/SwanLab/blob/main/swanlab/data/modules/text.py)\n\n```python\nText(\n    data: Union[str],\n    caption: str = None,\n) -> None\n```\n\n| 参数    | 描述                                                              |\n|-------|-----------------------------------------------------------------|\n| data  | (Union[str]) 接收字符串。                                      |\n| caption | (str) 文本的标签。用于在实验看板中对data进行标记。                     |\n\n## 介绍\n\n对文本数据做转换，以被`swanlab.log()`记录。\n\n![](./py-text/show.png)\n\n### 记录字符串文本\n\n记录单个字符串文本：\n\n```python{4}\nimport swanlab\n\nswanlab.init()\ntext = swanlab.Text("an awesome text.")\nswanlab.log({"examples": text})\n```\n\n记录多个字符串文本：\n\n```python\nimport swanlab\n\nswanlab.init()\n\nexamples = []\nfor i in range(3):\n    text = swanlab.Text("an awesome text.")\n    examples.append(text)\n\nswanlab.log({"examples": examples})\n```\n            '}]
2025-08-01 15:20:49.482 | WARNING  | metagpt.utils.cost_manager:update_cost:49 - Model Qwen/Qwen2.5-32B-Instruct not found in TOKEN_COSTS.
2025-08-01 15:20:50.848 | DEBUG    | metagpt.provider.base_llm:aask:149 - [{'role': 'system', 'content': 'You are a helpful assistant.'}, {'role': 'user', 'content': '\n            分析以下 Markdown 内容\n            格式如下所示：\n            把内容进行分块整理。\n            主标题：(文档标题)\n            二级标题（文档二级标题）：内容\n            ################\n            主标题：(文档标题)\n            二级标题（文档二级标题）：内容\n            ################\n            ......\n            ################\n            参考内容：# swanlab.converter\n\n将其他日志工具的内容转换为SwanLab项目的API。\n\n- [swanlab.converter.TFBConverter](/guide_cloud/integration/integration-tensorboard)\n- [swanlab.converter.WandbConverter](/guide_cloud/integration/integration-wandb)\n- [swanlab.converter.MLFlowConverter](/guide_cloud/integration/integration-mlflow)\n            '}]
2025-08-01 15:20:55.643 | WARNING  | metagpt.utils.cost_manager:update_cost:49 - Model Qwen/Qwen2.5-32B-Instruct not found in TOKEN_COSTS.
2025-08-01 15:20:57.007 | DEBUG    | metagpt.provider.base_llm:aask:149 - [{'role': 'system', 'content': 'You are a helpful assistant.'}, {'role': 'user', 'content': '\n            分析以下 Markdown 内容\n            格式如下所示：\n            把内容进行分块整理。\n            主标题：(文档标题)\n            二级标题（文档二级标题）：内容\n            ################\n            主标题：(文档标题)\n            二级标题（文档二级标题）：内容\n            ################\n            ......\n            ################\n            参考内容：# swanlab.echarts \n\n<!--@include: @zh/shared/custom-charts.md-->\n\n<!--@include: @zh/shared/custom-charts-3d.md-->\n            '}]
2025-08-01 15:20:59.940 | WARNING  | metagpt.utils.cost_manager:update_cost:49 - Model Qwen/Qwen2.5-32B-Instruct not found in TOKEN_COSTS.
2025-08-01 15:21:01.472 | DEBUG    | metagpt.provider.base_llm:aask:149 - [{'role': 'system', 'content': 'You are a helpful assistant.'}, {'role': 'user', 'content': '\n            分析以下 Markdown 内容\n            格式如下所示：\n            把内容进行分块整理。\n            主标题：(文档标题)\n            二级标题（文档二级标题）：内容\n            ################\n            主标题：(文档标题)\n            二级标题（文档二级标题）：内容\n            ################\n            ......\n            ################\n            参考内容：# swanlab.init\n\n```python\ninit(\n    project: str = None,\n    workspace: str = None,\n    experiment_name: str = None,\n    description: str = None,\n    tags: List[str] = None,\n    config: Union[dict, str] = None,\n    logdir: str = None,\n    mode: str = "cloud",\n    load: str = None,\n    public: bool = None,\n    callbacks: list = None,\n    settings: Settings = None,\n    id: str = None,\n    resume: Union[Literal[\'must\', \'allow\', \'never\'], bool] = None,\n    reinit: bool = None,\n    **kwargs,\n)\n```\n\n| 参数         | 描述 |\n|-------------|------|\n| project |(str)项目名，如果不指定则取运行目录的名称。|\n| workspace |(str)工作空间，默认将实验同步到你的个人空间下，如果要上传到组织，则填写组织的username。|\n| experiment_name | (str) 实验名称, 如果不指定则取"swan-1"这样的`动物名+序号`作为实验名。 |\n| tags       | (list) 实验标签。可以传入多个字符串组成的列表，标签会显示在实验顶部的标签栏。|\n| description   | (str) 实验描述, 如果不指定默认为None。                                   |\n| config       | (dict, str) 实验配置，在此处可以记录一些实验的超参数等信息。支持传入配置文件路径，支持yaml和json文件。                   |\n| logdir       | (str) 离线看板日志文件存储路径，默认为`swanlog `。                                 |\n| mode       | (str) 设置swanlab实验创建的模式，可选"cloud"、"local"、"offline"、"disabled"，默认设置为"cloud"。<br>`cloud`：将实验上传到云端。（公有云和私有化部署）<br>`offline`：仅将实验数据保存到本地。<br>`local`：不上传到云端，但会记录实验数据和一些可被`swanlab watch`打开的数据到本地。<br>`disabled`：不上传也不记录。|\n| load       | (str) 加载的配置文件路径，支持yaml和json文件。|\n| public       | (bool) 设置使用代码直接创建SwanLab项目的可见性，默认为False即私有。|\n| callbacks       | (list) 设置实验回调函数，支持`swankit.callback.SwanKitCallback`的子类。|\n| name       | (str) 与experiment_name效果一致，优先级低于experiment_name。|\n| notes       | (str) 与description效果一致，优先级低于description。|\n| settings       | (dict) 实验配置。支持传入1个`swanlab.Settings`对象。|\n| id       | (str) 上次实验的运行ID，用于恢复上次实验。ID必须为21位字符串。|\n| resume       | (str) 断点续训模式，可选True、False、"must"、"allow"、"never"，默认取None。<br>`True`： 效果同`resume="allow"`。<br>`False`：效果同`resume="never"`。<br>`must`：你必须传递 `id` 参数，并且实验必须存在。<br>`allow`：如果存在实验，则会resume该实验，否则将创建新的实验。<br>`never`：你不能传递 `id` 参数，将会创建一个新的实验。(即不开启resume的效果)|\n| reinit       | (bool) 是否重新创建实验，如果为True，则每次调用`swanlab.init()`时，会把上一次实验`finish`掉；默认取None。|\n\n## 介绍\n\n- 在机器学习训练流程中，我们可以将`swandb.init()`添加到训练脚本和测试脚本的开头，SwanLab将跟踪机器学习流程的每个环节。\n\n- `swanlab.init()`会生成一个新的后台进程来将数据记录到实验中，默认情况下，它还会将数据同步到swanlab.cn，以便你可以在线实时看到可视化结果。\n\n- 在使用`swanlab.log()`记录数据之前，需要先调用`swanlab.init()`：\n\n```python\nimport swanlab\n\nswanlab.init()\nswanlab.log({"loss": 0.1846})\n```\n\n- 调用`swanlab.init()`会返回一个`SwanLabRun`类型的对象，同样可以执行`log`操作：\n\n```python\nimport swanlab\n\nrun = swanlab.init()\nrun.log({"loss": 0.1846})\n```\n\n- 在脚本运行结束时，我们将自动调用`swanlab.finish`来结束SwanLab实验。但是，如果从子进程调用`swanlab.init()`，如在jupyter notebook中，则必须在子进程结束时显式调用`swanlab.finish`。\n\n```python\nimport swanlab\n\nswanlab.init()\nswanlab.finish()\n```\n\n\n## 更多用法\n\n### 设置项目、实验名、描述\n\n```python\nswanlab.init(\n    project="cats-detection",\n    experiment_name="YoloX-baseline",\n    description="YoloX检测模型的基线实验，主要用于后续对比。",\n)\n```\n\n### 设置标签\n\n```python\nswanlab.init(\n    tags=["yolo", "detection", "baseline"]\n)\n```\n\n### 设置日志文件保存位置\n\n下面的代码展示了如何将日志文件保存到自定义的目录下：\n\n```python\nswanlab.init(\n    logdir="path/to/my_custom_dir",\n)\n```\n\n### 将实验相关的元数据添加到实验配置中\n\n```python\nswanlab.init(\n    config={\n        "learning-rate": 1e-4,\n        "model": "CNN",\n    }\n)\n\n```\n\n### 上传到组织\n\n```python\nswanlab.init(\n    workspace="[组织的username]"\n)\n```\n\n### 插件\n\n关于插件的更多信息，请参考[插件](/plugin/plugin-index.md)。\n\n```python\nfrom swanlab.plugin.notification import EmailCallback\n\nemail_callback = EmailCallback(...)\n\nswanlab.init(\n    callbacks=[email_callback]\n)\n```\n\n### 断点续训\n\n断点续训的意思是，如果你之前有一个状态为`完成`或`中断`的实验，需要补一些实验数据，那么你可以通过`resume`和`id`参数来恢复这个实验。\n\n```python\nswanlab.init(\n    resume=True,\n    id="14pk4qbyav4toobziszli",  # id必须为21位字符串\n)\n```\n\n实验id可以在实验的「环境」选项卡或URL中找到，必须为1个21位字符串。\n\n\n:::tip resume使用场景\n\n1. 之前的训练进程断了，基于checkpoint继续训练时，希望实验图表能和之前的swanlab实验续上，而非创建1个新swanlab实验\n2. 训练和评估分为了两个进程，但希望评估和训练记录在同一个swanlab实验中\n3. config中有一些参数填写有误，希望更新config参数\n\n:::\n\n:::warning ⚠️注意\n\n1. 由项目克隆产生的实验，不能被resume\n\n:::\n\n\n断点续训可以选择三种模式：\n\n1. `allow`：如果项目下存在`id`对应的实验，则会resume该实验，否则将创建新的实验。\n2. `must`：如果项目下存在`id`对应的实验，则会resume该实验，否则将报错\n3. `never`：不能传递 `id` 参数，将会创建一个新的实验。(即不开启resume的效果)\n\n::: info\n`resume=True` 效果同 `resume="allow"`。<br>\n`resume=False` 效果同 `resume="never"`。\n:::\n\n测试代码：\n\n```python\nimport swanlab\n\nrun = swanlab.init()\nswanlab.log({"loss": 2, "acc":0.4})\nrun.finish()\n\nrun = swanlab.init(resume=True, id=run.id)\nswanlab.log({"loss": 0.2, "acc": 0.9})\n```\n\n\n## 过期参数\n\n- `cloud`：在v0.3.4被`mode`参数取代。参数仍然可用，且会覆盖掉`mode`的设置。\n\n            '}]
2025-08-01 15:21:41.426 | WARNING  | metagpt.utils.cost_manager:update_cost:49 - Model Qwen/Qwen2.5-32B-Instruct not found in TOKEN_COSTS.
2025-08-01 15:21:42.861 | DEBUG    | metagpt.provider.base_llm:aask:149 - [{'role': 'system', 'content': 'You are a helpful assistant.'}, {'role': 'user', 'content': '\n            分析以下 Markdown 内容\n            格式如下所示：\n            把内容进行分块整理。\n            主标题：(文档标题)\n            二级标题（文档二级标题）：内容\n            ################\n            主标题：(文档标题)\n            二级标题（文档二级标题）：内容\n            ################\n            ......\n            ################\n            参考内容：# swanlab.integration\n\n[源代码](https://github.com/SwanHubX/SwanLab/tree/main/swanlab/integration)\n\nSwanLab与外部项目的集成API。\n\n- [swanlab.integration.accelerate](/guide_cloud/integration/integration-huggingface-accelerate.md)\n- [swanlab.integration.fastai](/guide_cloud/integration/integration-fastai.md)\n- [swanlab.integration.keras](/guide_cloud/integration/integration-keras.md)\n- [swanlab.integration.lightgbm](/guide_cloud/integration/integration-lightgbm.md)\n- [swanlab.integration.mmengine](/guide_cloud/integration/integration-mmengine.md)\n- [swanlab.integration.pytorch_lightning](/guide_cloud/integration/integration-pytorch-lightning.md)\n- [swanlab.integration.sb3](/guide_cloud/integration/integration-sb3.md)\n- [swanlab.integration.torchtune](/guide_cloud/integration/integration-pytorch-torchtune.md)\n- [swanlab.integration.transformers](/guide_cloud/integration/integration-huggingface-transformers.md)\n- [swanlab.integration.ultralytics](/guide_cloud/integration/integration-ultralytics.md)\n- [swanlab.integration.xgboost](/guide_cloud/integration/integration-xgboost.md)\n            '}]
2025-08-01 15:21:49.470 | WARNING  | metagpt.utils.cost_manager:update_cost:49 - Model Qwen/Qwen2.5-32B-Instruct not found in TOKEN_COSTS.
2025-08-01 15:21:50.880 | DEBUG    | metagpt.provider.base_llm:aask:149 - [{'role': 'system', 'content': 'You are a helpful assistant.'}, {'role': 'user', 'content': '\n            分析以下 Markdown 内容\n            格式如下所示：\n            把内容进行分块整理。\n            主标题：(文档标题)\n            二级标题（文档二级标题）：内容\n            ################\n            主标题：(文档标题)\n            二级标题（文档二级标题）：内容\n            ################\n            ......\n            ################\n            参考内容：# log\n\n[Github源代码](https://github.com/SwanHubX/SwanLab/blob/main/swanlab/data/sdk.py)\n\n```python\nlog(\n    data: Dict[str, DataType],\n    step: int = None,\n    print_to_console: bool = False,\n)\n```\n\n| 参数   | 描述                                       |\n|--------|------------------------------------------|\n| data   | (Dict[str, DataType]) 必须。传入一个键值对字典，key为指标名，value为指标值。value支持int、float、可被float()转换的类型、或任何`BaseType`类型。 |\n| step   | (int) 可选，该参数设置了data的步数。如不设置step，则将以0开始，后续每1次step累加1。 |\n| print_to_console | (bool) 可选，默认值为False。当设置为True时，会将data的key和value以字典的形式打印到终端。 |\n\n## 介绍\n\n`swanlab.log`是指标记录的核心API，使用它记录实验中的数据，例如标量、图像、音频和文本。  \n\n最基本的用法是如下面代码所示，这将会将准确率与损失值记录到实验中，生成可视化图表并更新这些指标的汇总值（summary）。：\n\n```python\nswanlab.log({"acc": 0.9, "loss":0.1462})\n```\n\n除了标量以外，`swanlab.log`支持记录多媒体数据，包括图像、音频、文本等，并在UI上有很好的显示效果。\n\n## 打印传入的字典\n\n`swanlab.log`支持打印传入的`data`的`key`和`value`到终端，默认情况下不打印。要开启打印的话，需要设置`print_to_console=True`。\n\n```python\nswanlab.log({"acc": 0.9, "loss":0.1462}, print_to_console=True)\n```\n\n当然，你也可以用这种方式打印：\n\n```python\nprint(swanlab.log({"acc": 0.9, "loss":0.1462}))\n```\n\n## 更多用法\n\n- 记录[图像](/api/py-Image.md)\n- 记录[音频](/api/py-Audio.md)\n- 记录[文本](/api/py-Text.md)\n            '}]
2025-08-01 15:22:06.035 | WARNING  | metagpt.utils.cost_manager:update_cost:49 - Model Qwen/Qwen2.5-32B-Instruct not found in TOKEN_COSTS.
2025-08-01 15:22:07.483 | DEBUG    | metagpt.provider.base_llm:aask:149 - [{'role': 'system', 'content': 'You are a helpful assistant.'}, {'role': 'user', 'content': "\n            分析以下 Markdown 内容\n            格式如下所示：\n            把内容进行分块整理。\n            主标题：(文档标题)\n            二级标题（文档二级标题）：内容\n            ################\n            主标题：(文档标题)\n            二级标题（文档二级标题）：内容\n            ################\n            ......\n            ################\n            参考内容：# swanlab.login\n\n``` bash\nlogin(\n    api_key: str = None,\n    host: str = None,\n    web_host: str = None,\n    save: bool = False\n):\n```\n\n| 参数 | 描述 |\n| --- | --- |\n| `api_key` | (str) 身份验证密钥，如果未提供，密钥将从密钥文件中读取。|\n| `host` | (str) SwanLab服务所在的API主机，如果未提供，将使用默认主机（即云端版）|\n| `web_host` | (str) SwanLab服务所在的Web主机，如果未提供，将使用默认主机（即云端版）|\n| `save` | (bool) 是否将API密钥保存到密钥文件中，默认值为False。|\n\n\n## 介绍\n\n在Python代码中登录SwanLab账号，以将实验上传到指定的云端服务器。API Key从你的SwanLab「设置」-「常规」页面中获取。\n\n## 登录到公有云\n\n```python\nimport swanlab\n\nswanlab.login(api_key='your-api-key', save=True)\n```\n\n默认将登录到`swanlab.cn`，即SwanLab公有云服务。\n\n如果需要登录到其他主机，可以指定`host`参数，如`http://localhost:8000`。\n\n将`save`参数设置为`True`，会将登录凭证保存到本地（会覆盖之前保存的凭证），无需再次通过`swanlab.login`或`swanlab login`登录。\n\n**如果你在公共机器上使用，请将`save`参数设置为`False`**，这样不会泄露你的API Key，也避免其他人不小心上传数据到你的空间。\n\n## 登录到私有化服务\n\n```python\nswanlab.login(api_key='your-api-key', host='your-private-host')\n```\n\n\n            "}]
2025-08-01 15:22:19.036 | WARNING  | metagpt.utils.cost_manager:update_cost:49 - Model Qwen/Qwen2.5-32B-Instruct not found in TOKEN_COSTS.
2025-08-01 15:22:20.471 | DEBUG    | metagpt.provider.base_llm:aask:149 - [{'role': 'system', 'content': 'You are a helpful assistant.'}, {'role': 'user', 'content': '\n            分析以下 Markdown 内容\n            格式如下所示：\n            把内容进行分块整理。\n            主标题：(文档标题)\n            二级标题（文档二级标题）：内容\n            ################\n            主标题：(文档标题)\n            二级标题（文档二级标题）：内容\n            ################\n            ......\n            ################\n            参考内容：# swanlab.Molecule\n\n[源代码](https://github.com/SwanHubX/SwanLab/blob/main/swanlab/data/modules/object3d/molecule.py)\n\n| 参数        | 描述       |\n|-----------|------------------------------------------------------------------------------------------------|\n| pdb_data | (str) 接收的PDB数据（字符串形式）                                 |      \n| caption   | (str) 分子对象的标签。用于在实验看板中展示分子对象时进行标记。                |        \n\n## 简介\n\n对各种类型的生物化学分子做转换，以被`swanlab.log()`记录。\n\n![molecule gif](/assets/molecule.gif)\n\n## 从RDKit Mol对象创建\n\n```python\nfrom rdkit import Chem\nimport swanlab\n\nmol = Chem.MolFromSmiles("CCO")\nmolecule = swanlab.Molecule.from_mol(mol, caption="Ethanol")\n\nswanlab.init(project="molecule_demo")\nswanlab.log({"molecule": molecule})\n```\n\n## 从PDB文件创建\n\n```python\nimport swanlab\n\nmolecule = swanlab.Molecule.from_pdb("path/to/your/pdb/file.pdb")\n\nswanlab.init(project="molecule_demo")\nswanlab.log({"molecule": molecule})\n```\n\n## 从SDF文件创建\n\n```python\nimport swanlab\n\nmolecule = swanlab.Molecule.from_sdf("path/to/your/sdf/file.sdf")\n\nswanlab.init(project="molecule_demo")\nswanlab.log({"molecule": molecule})\n```\n\n## 从SMILES字符串创建\n\n```python\nimport swanlab\n\nmolecule = swanlab.Molecule.from_smiles("CCO")\n\nswanlab.init(project="molecule_demo")\nswanlab.log({"molecule": molecule})\n```\n\n## 从MOL文件创建\n\n```python\nimport swanlab\n\nmolecule = swanlab.Molecule.from_mol("path/to/your/mol/file.mol")\n\nswanlab.init(project="molecule_demo")\nswanlab.log({"molecule": molecule})\n```\n            '}]
2025-08-01 15:22:34.537 | WARNING  | metagpt.utils.cost_manager:update_cost:49 - Model Qwen/Qwen2.5-32B-Instruct not found in TOKEN_COSTS.
2025-08-01 15:22:36.276 | DEBUG    | metagpt.provider.base_llm:aask:149 - [{'role': 'system', 'content': 'You are a helpful assistant.'}, {'role': 'user', 'content': '\n            分析以下 Markdown 内容\n            格式如下所示：\n            把内容进行分块整理。\n            主标题：(文档标题)\n            二级标题（文档二级标题）：内容\n            ################\n            主标题：(文档标题)\n            二级标题（文档二级标题）：内容\n            ################\n            ......\n            ################\n            参考内容：# swanlab.Object3D\n\n[Github源代码](https://github.com/SwanHubX/SwanLab/blob/main/swanlab/data/modules/object3d/object3d.py)\n\n| 参数        | 描述   |\n|-----------|---------------|\n| data | (Union[np.ndarray, str, Path]) 接收点云文件路径、numpy数组。Object3D类将判断接收的数据类型做相应的转换。                                      |              |\n| caption   | (str) 3D对象的标签。用于在实验看板中展示3D对象时进行标记。                                                                                                                 |\n\n\n## 介绍\n\n对各种类型的点云数据做转换，以被`swanlab.log()`记录。\n\n![](./py-object3d/demo.png)\n\n### 从文件/字典创建\n\n::: warning 示例文件\ndata.swanlab.pts.json：[Google Drive下载](https://drive.google.com/file/d/1mFill-BXw3cirPHwIHndb1wNX4pWvSXb/view)\n:::\n\n文件的格式为`json`，内容格式如下：\n\n```json\n{\n    "points": [\n        [x1, y1, z1, r1, g1, b1],\n        [x2, y2, z2, r2, g2, b2],\n        ...\n    ],\n    // （可选）检测框，用于点云检测等任务，会框住对应位置\n    "boxes": [\n        {\n            "color": [r, g, b],\n            "corners": [[x1,y1,z1], ..., [x8,y8,z8]],\n            // （可选）检测框的标签文本，会在视图中显示\n            "label": "class_name",\n            // （可选）置信度，会在视图中显示\n            "score": 0.95,\n        },\n        ...\n    ]\n}\n```\n\n**json文件参数详细解释：**\n\n* **`points`**：\n    * 这是一个数组，用于存储3D点云数据。\n    * 每个元素都是一个包含6个数值的数组 `[x, y, z, r, g, b]`，分别代表：\n        * `x`, `y`, `z`：点的三维坐标。\n        * `r`, `g`, `b`：点的颜色，分别代表红、绿、蓝三个通道的数值，通常取值范围为0-255。\n\n* **`boxes`**（可选）：\n    * 这是一个数组，用于存储3D检测框数据。\n    * 每个元素都是一个对象，代表一个检测框，包含以下字段：\n        * **`color`**：检测框的颜色，`[r, g, b]` 数组，代表红、绿、蓝三个通道的数值。\n        * **`corners`**：检测框的八个顶点坐标，`[[x1, y1, z1], ..., [x8, y8, z8]]` 数组，每个元素是一个三维坐标 `[x, y, z]`。\n        * **`label`**（可选）：检测框的标签文本，字符串类型，用于在视图中显示检测框的类别。\n        * **`score`**（可选）：检测框的置信度，数值类型，通常取值范围为0-1，用于表示检测框的可靠程度。\n\n---\n\n使用SwanLab从`json`文件中记录3D点云数据：\n\n::: code-group\n\n```python [Object3D]\nimport swanlab\n\nswanlab.init()\n\nobj = swanlab.Object3D("data.swanlab.pts.json", caption="3d_point_cloud")\nswanlab.log({"examples": obj})\n```\n\n```python [Object3D.from_point_data]\nimport swanlab\n\nswanlab.init()\n\nwith open("data.swanlab.pts.json", "r") as f:\n    cloud_point = json.load(f)\n\nobj = swanlab.Object3D.from_point_data(\n    points=cloud_point["points"],\n    boxes=cloud_point["boxes"],\n    caption="3d_point_cloud"\n)\n\nswanlab.log({"examples": obj})\n```\n:::\n\n\n<video controls src="./py-object3d/video.mp4"></video>\n\n<br>\n\n### 从numpy数组创建\n\n::: code-group\n\n```python [从坐标创建]\nimport numpy as np\n\n# Example 1: Create point cloud from coordinates\npoints_xyz = np.array([\n    [0, 0, 0],  # Point1: x=0, y=0, z=0\n    [1, 1, 1],  # Point2: x=1, y=1, z=1\n    [2, 0, 1]   # Point3: x=2, y=0, z=1\n])\n\ncloud_xyz = swanlab.Object3D(points_xyz, caption="Basic XYZ Points")\nswanlab.log({"examples": cloud_xyz})\n```\n\n```python [从坐标和类别创建]\nimport numpy as np\n\n# Example 2: Create point cloud with categories\npoints_xyzc = np.array([\n    [0, 0, 0, 0],  # Point1: xyz + category 0\n    [1, 1, 1, 1],  # Point2: xyz + category 1\n    [2, 0, 1, 2]   # Point3: xyz + category 2\n])\n\ncloud_xyzc = swanlab.Object3D(points_xyzc, caption="Points with Categories")\nswanlab.log({"examples": cloud_xyzc})\n```\n\n```python [从坐标和RGB创建]\nimport numpy as np\n\n# Example 3: Create point cloud with RGB colors\npoints_xyzrgb = np.array([\n    [0, 0, 0, 255, 0, 0],    # Point1: xyz + red\n    [1, 1, 1, 0, 255, 0],    # Point2: xyz + green\n    [2, 0, 1, 0, 0, 255]     # Point3: xyz + blue\n])\n\ncloud_xyzrgb = swanlab.Object3D(points_xyzrgb, caption="Colored Points")\nswanlab.log({"examples": cloud_xyzrgb})\n```\n:::\n\n### 单步记录多个点云\n\n```python\nimport swanlab\n\n...\n\ncloud1 = swanlab.Object3D(points1, caption="cloud1")\ncloud2 = swanlab.Object3D(points2, caption="cloud2")\ncloud3 = swanlab.Object3D(points3, caption="cloud3")\n\n...\n\nswanlab.log({"examples": [cloud1, cloud2, cloud3, ...]})\n```\n            '}]
